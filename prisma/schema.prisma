generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  firstName   String
  lastName    String
  password    String
  image       String?
  phoneNumber String?
  userType    userTypes @default(SUBCONTRACTOR)
  signature   SignaNum? @relation(fields: [signatureId], references: [id], onDelete: Cascade)
  signatureId String?
  valid       Boolean   @default(false)

  moderator       Moderator?
  subcontractor   SubContractor?
  Negociator      Negociator?
  Bureau          Bureau?
  resetTokens     ResetToken[]
  //tetincrementa a chaque changement li lazem y'deconnecti les sessions lokhrin
  ver             Int               @default(0)
  Notification    Notification[]
  EmailValidation EmailValidation[]

  @@index([email])
}

model EmailValidation {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  valid     Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String?
  targetId  String
  target    User     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  payload   Json     @default("{}")
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ResetToken {
  id        String   @id @default(cuid())
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   String
  token     String
  createdAt DateTime @default(now())

  @@index([ownerId])
}

enum userTypes {
  MODERATOR
  SUBCONTRACTOR
  NEGOCIATOR
  BUREAU
}

model Moderator {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id @unique

  region String
  admin  Boolean @default(false)
  Site   Site[]
}

model SubContractor {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id @unique

  status      Float   @default(0)
  fullName    String
  address     String
  CAF         Int     @default(0)
  SPOC        String
  deployment  Boolean @default(false)
  maintenance Boolean @default(false)

  sites Site[]
}

model Site {
  id          Int        @id @default(autoincrement())
  type        SiteTypes
  startDate   DateTime   @default(now())
  endDate     DateTime
  code        Int        @unique
  name        String
  region      String
  wilaya      Wilayas
  location    String
  progression Int        @default(0)
  status      SiteStatus @default(ONGOING)
  lat         String     @default("N/A")
  long        String     @default("N/A")

  //step
  negociatorId    String?
  subcontractorId String
  bureauId        String?
  moderatorId     String

  subcontractor     SubContractor       @relation(fields: [subcontractorId], references: [userId])
  negociator        Negociator?         @relation(fields: [negociatorId], references: [userId])
  Bureau            Bureau?             @relation(fields: [bureauId], references: [userId])
  Moderator         Moderator           @relation(fields: [moderatorId], references: [userId])
  Document          Document[]
  steps             Step[]
  ManagerInvitation ManagerInvitation[]
  Invitation        Invitation[]
}

model Negociator {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id @unique

  sites Site[]
}

model Bureau {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @id @unique

  sites Site[]
}

model Document {
  id   String   @id @default(cuid())
  type DocTypes
  data Json
  path String?

  site   Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int

  //TODO: Add Step relation when steps are implemented 
  step   Step   @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId String
}

model Step {
  id        String     @id @default(cuid())
  status    StepStatus @default(PENDING)
  payload   Json       @default("{}")
  type      StepTypes
  createdAt DateTime   @default(now())
  comment   String     @default("N/A")

  site         Site           @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId       Int
  Manager      Manager[]
  Images       Images[]
  SA1Candidate SA1Candidate[]
  SubStepOC    SubStepOC[]
  Document     Document[]
}

model SA1Candidate {
  id     String @id @default(cuid())
  stepId String
  step   Step   @relation(fields: [stepId], references: [id], onDelete: Cascade)

  long     String
  lat      String
  location String

  status CandidateStatus @default(PENDING)
}

model SubStepOC {
  id        String          @id @default(cuid())
  stepId    String
  step      Step            @relation(fields: [stepId], references: [id], onDelete: Cascade)
  status    SubStepOCStatus @default(ACTIVE)
  createdAt DateTime        @default(now())
  index     Int

  indoor   ImageCollection? @relation("indoorCollection", fields: [indoorId], references: [id], onDelete: SetNull)
  indoorId String?

  outdoor   ImageCollection? @relation("outdoorCollection", fields: [outdoorId], references: [id], onDelete: SetNull)
  outdoorId String?

  Images            Images[]
  imageCollection   ImageCollection? @relation("defaultCollection", fields: [imageCollectionId], references: [id], onDelete: SetNull)
  imageCollectionId String?

  @@index([stepId])
}

enum SubStepOCStatus {
  ACTIVE
  INACTIVE
}

enum CandidateStatus {
  PENDING
  CHOSEN
}

model Manager {
  id          String            @id @default(uuid())
  email       String
  validation  ManagerValidation @default(PENDING)
  type        String
  phoneNumber String            @default("0541129519")
  createdAt   DateTime          @default(now())
  sentAt      DateTime?

  signature   SignaNum? @relation(fields: [signatureId], references: [id], onDelete: Cascade)
  signatureId String?

  step   Step   @relation(fields: [stepId], references: [id], onDelete: Cascade)
  stepId String
}

model ManagerInvitation {
  id          String    @id @default(uuid())
  email       String
  phoneNumber String
  type        String
  stepType    StepTypes

  site   Site @relation(fields: [siteId], references: [id], onDelete: Cascade)
  siteId Int
}

model Images {
  id        String   @id @default(uuid())
  path      String
  stepId    String?
  createdAt DateTime @default(now())

  collectionId String?
  subStepId    String?

  step       Step?            @relation(fields: [stepId], references: [id], onDelete: Cascade)
  subStep    SubStepOC?       @relation(fields: [subStepId], references: [id], onDelete: Cascade)
  collection ImageCollection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
}

model ImageCollection {
  id          String      @id @default(cuid())
  Images      Images[]
  indoorStep  SubStepOC[] @relation("indoorCollection")
  outdoorStep SubStepOC[] @relation("outdoorCollection")
  defaultStep SubStepOC[] @relation("defaultCollection")
}

model SignaNum {
  id        String    @id @default(uuid())
  path      String
  createdAt DateTime  @default(now())
  Manager   Manager[]
  User      User[]
}

model Invitation {
  id     String          @id @default(uuid())
  siteId Int
  site   Site            @relation(fields: [siteId], references: [id])
  type   InvitationTypes
  email  String
}

enum InvitationTypes {
  NEGOCIATOR
  BUREAU
}

enum ManagerValidation {
  VALID
  PENDING
  REFUSED
}

enum StepTypes {
  SA1
  SA2
  SA3
  SA4
  ANF
  DOS
  DEMOC
  OC
  APD
}

enum StepStatus {
  COMPLETED
  PENDING
  VALIDATION
  FAILED
}

enum DocTypes {
  RECEIPT
  SA1
  SA2
  SA3
  SA4
  ANF
  ASBUILT
}

enum SiteTypes {
  PYLON
  TERASSE
}

enum SiteStatus {
  ONGOING
  COMPLETED
  CANCELLED
  SUSPENDED
  LATE
}

enum Wilayas {
  PARIS
  ADRAR
  CHLEF
  LAGHOUAT
  OUM_EL_BOUAGHI
  BATNA
  BEJAIA
  BISKRA
  BECHAR
  BLIDA
  BOUIRA
  TAMANRASSET
  TBESSA
  TLEMCEN
  TIARET
  TIZI_OUZOU
  ALGER
  DJELFA
  JIJEL
  SETIF
  SAIDA
  SKIKDA
  SIDI_BEL_ABBES
  ANNABA
  GUELMA
  CONSTANTINE
  MEDEA
  MOSTAGANEM
  MSILA
  MASCARA
  OUARGLA
  ORAN
  EL_BAYADH
  ILLIZI
  BORDJ_BOU_ARRERIDJ
  BOUMERDES
  EL_TARF
  TINDOUF
  TISSEMSILT
  EL_OUED
  KHENCHELA
  SOUK_AHRAS
  TIPAZA
  MILA
  AIN_DEFLA
  NAAMA
  AIN_TEMOUCHENT
  GHARDAIA
  RELIZANE
  EL_MGHAIR
  EL_MENIA
  OULED_DJELLAL
  BORDJ_BAJI_MOKHTAR
  BENI_ABBES
  TIMIMOUN
  TOUGGOURT
  DJANET
  IN_SALAH
  IN_GUEZZAM
}
